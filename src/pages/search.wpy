<!--  -->
<template>
  <!-- 搜索页面顶部 -->
  <view class="search-box">
      <icon type="search" size="20"></icon>
      <input @input="inputValue" type="text" placeholder="请输入你想要的商品" value="{{searchValue}}">
      <button @tap="btnSearch" hidden="{{isHidden}}">搜索</button>
  </view>
  <!-- 搜索历史 -->
  <view class="history-box" hidden="{{!searchHidden}}">
      <view class="title-box">
          <view class="title">搜索历史</view>
          <view @tap="clearHistory" class="clear">X</view>
      </view>
      <view class="history-list">
          <block wx:for="{{searchHistory}}" wx:key="">
              <!-- 因为保存的数据就是一个一个的字符串 直接item即可 -->
            <view @tap="toSearch({{item}})" class="item">{{item}}</view>
          </block>
      </view>
  </view>
  <!-- 商品的列表 -->
  <view class="product-list" hidden="{{searchHidden}}">
      <view class="product-top">
          <view @tap="searchItem(0)" class="item {{searchIndex==0?'active':''}}">综合</view>
          <view @tap="searchItem(1)" class="item iconfont {{searchIndex==1?'active':''}} {{!ascending1?'icon-jiantoushang':'icon-jiantouxia'}}">销量</view>
          <view @tap="searchItem(2)" class="item iconfont {{searchIndex==2?'active':''}} {{!ascending?'icon-jiantoushang':'icon-jiantouxia'}}">
              价格
          </view>
      </view>
      <view class="products">
         <block wx:for="{{productData}}" wx:key="">
           <view class="product" @tap="toDetail({{item.goods_id}})">
               <view class="left">
                   <image src="{{item.goods_small_logo}}"></image>
               </view>
               <view class="right">
                   <view class="product-title">{{item.goods_name}}</view>
                   <view class="price">￥<text>{{item.goods_price}}</text>.00</view>
               </view>
           </view>
         </block>
      </view>
  </view>
</template>

<script>
import wepy from 'wepy'
export default class Search extends wepy.page {
  config = {
    navigationBarTitleText: '搜索'
  }

  data = {
    //   声明一个用来控制搜索按钮
    isHidden: true,
    searchValue: '',
    // 声明一个空值 用来描述搜索历史
    searchHistory: undefined,
    searchHidden: true,
    searchIndex: 0,
    productData: [],
    ascending: true,
    ascending1: true
  }

  components = {}

  methods = {
    //   点击输入内容时显示/隐藏元素
    inputValue(event) {
      //   console.log(event);
      // 判断当输入有内容时 显示元素  没有就隐藏
      if (event.detail.value.trim().length == 0) {
        this.isHidden = true
      } else {
        this.isHidden = false
      }
      this.searchValue = event.detail.value
    },
    //   点击按钮搜索
    btnSearch() {
      wx.showLoading({
        title: '正在加载中....',
        mask: true
      })
      //   console.log(this.searchValue)
      // 拿到输入的内容  添加到数组中
      // console.log(this.searchHistory.indexOf(this.searchValue))
      // 判断当前数组是否已有输入的内容  有的话就不添加到数组  没有就添加
      var searchIndex = this.searchHistory.indexOf(this.searchValue)
      if (searchIndex != -1) {
        //  使用数组的替换的方法 splice(替换的内容,个数)
        this.searchHistory.splice(searchIndex, 1)
      }
      //   判断当前数组的长度是否大于等于8个 大于的话就把前面的去掉
      //   if (this.searchHistry.length >= 8) {
      //     // 把第一个去掉
      //     this.searchHistory.splice(0, 1)
      //   }
      this.searchHistory.push(this.searchValue)

      //  保存到缓存中
      wx.setStorage({
        key: 'search',
        data: this.searchHistory
      })
      //点击搜索把调用接口
      wx.request({
        url: 'https://www.zhengzhicheng.cn/api/public/v1/goods/search',
        method: 'GET',
        data: { query: this.searchValue },
        success: data => {
          console.log(data)
          wx.hideLoading()
          // 点击搜索时  让搜索历史隐藏 商品列表显示
          this.searchHidden = false
          this.productData = data.data.message.goods
          //   在回调函数中需要手动设置apply() 才会触发脏数据
          this.$apply()
        },
        fail: () => {}
      })
    },
    clearHistory() {
      // console.log('aaa');
      //把历史搜索的记录清空
      this.searchHistory = []
      // 在缓存中清除掉
      // wx.clearStorage();// 这样写的话会太暴力的
      // 这样的话 会好一点 就单单清除保存的那些 初始化的不清除
      wx.removeStorage({
        key: 'search'
      })
    },
    //  点击下面的数据 把值放在搜索框上
    toSearch(res) {
      // console.log(res);
      this.searchValue = res
      // 让搜索框显示
      this.isHidden = false
    },
    //点击谁 谁获取高亮
    searchItem(index) {
      //   console.log(index)
      this.searchIndex = index
      // 点击销量或价格时的排序
      if (index == 0) {
        console.log('默认值')
      } else if (index == 1) {
        console.log('销量排序')
        this.ascending1 = !this.ascending1
        this.productData.sort((a, b) => {
          // console.log(a);
          // console.log(b);
          if (this.ascending) {
            return a.goods_id - b.goods_id
          } 
        })
      } else if (index == 2) {
        console.log('价格排序')
        this.ascending = !this.ascending
        this.productData.sort((a, b) => {
          // console.log(a);
          // console.log(b);
          if (this.ascending) {
            return a.goods_price - b.goods_price
          } else {
            return b.goods_price - a.goods_price
          }
        })
      }
    },
    // 点击跳转到详情页面
    toDetail(goods_id){
      // console.log(goods_id);
      wx.navigateTo({
        url: '/pages/detail?goods_id='+goods_id
      });
    }
  }
  onLoad() {
    wx.getStorage({
      key: 'search',
      success: res => {
        // console.log(res)
        this.searchHistory = res.data
      },
      fail: res => {
        //   如果没有数据就初始化一些数据
        console.log(res)
        this.searchHistory = ['小米电视', '小米手机', '锤子手机']
        //   需要手动设置 检查数据
        this.$apply()
      }
    })
  }

  onShow() {}
}
</script>

<style lang='less'>
// 搜索顶部
.search-box {
  height: 120rpx;
  background-color: #eee;
  display: flex;
  align-items: center;
  position: relative;
  padding: 30rpx 15rpx;
  box-sizing: border-box;
  icon {
    position: absolute;
    left: 37rpx;
    top: 50%;
    transform: translateY(-50%);
    z-index: 222;
  }
  input {
    flex: 1;
    height: 60rpx;
    background-color: #fff;
    font-size: 28rpx;
    margin-right: 20rpx;
    padding-left: 80rpx;
    box-sizing: border-box;
    border-radius: 5rpx;
  }
  button {
    width: 160rpx;
    height: 60rpx;
    border: 1px solid #ccc;
    box-sizing: border-box;
    background-color: #eee;
    font-size: 28rpx;
    line-height: 60rpx;
  }
}
// 搜索历史区域
.history-box {
  padding: 0 19rpx;
  .title-box {
    height: 88rpx;
    display: flex;
    align-items: center;
    justify-content: space-between;
    .title {
      font-size: 32rpx;
    }
    .clear {
      width: 30rpx;
      height: 30rpx;
      background-color: #ccc;
      text-align: center;
      line-height: 30rpx;
      border-radius: 50%;
      font-size: 25rpx;
    }
  }
  .history-list {
    overflow: hidden;
    .item {
      padding: 20rpx 22rpx;
      background-color: #ddd;
      font-size: 28rpx;
      float: left;
      margin-right: 30rpx;
      margin-bottom: 18rpx;
    }
  }
}
// 商品列表
.product-list {
  .product-top {
    height: 100rpx;
    background-color: #fff;
    display: flex;
    align-items: center;
    border-bottom: 1px solid #ccc;
    .item {
      flex: 1;
      text-align: center;
      line-height: 100rpx;
      font-size: 34rpx;
      &.active {
        color: #ff2d4a;
      }
    }
  }
  .products {
    padding: 0 20rpx;
    height: 260rpx;
    box-sizing: border-box;
    .product {
      display: flex;
      height: 260rpx;
      align-items: center;
      padding: 30rpx 0;
      box-sizing: border-box;
      .left {
        width: 200rpx;
        margin-right: 27rpx;
        image {
          width: 200rpx;
          height: 200rpx;
        }
      }
      .right {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        .product-title {
          font-size: 32rpx;
          height: 85rpx;
          overflow: hidden;
          text-overflow: ellipsis;
          white-space: wrap;
          margin-bottom: 90rpx;
        }
        .price {
          font-size: 24rpx;
          color: #eb4450;
          text {
            font-size: 34rpx;
          }
        }
      }
    }
  }
}
</style>